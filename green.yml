- name: Create EC2
  hosts: [localhost]
  connection: local
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    application: djangogreen
    region: us-west-2
  
  tasks: 
    - name: Create ELB
      ec2_elb_lb:
        name: "{{ application }}-load-balancer"
        state: present
        region: "{{ region }}"
        zones:
          - us-west-2a
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 8000
      register: elb
      
    - name: Create EC2 instance 
      ec2:
        instance_type: t2.micro
        image: ami-06d51e91cea0dac8d
        region: "{{ region }}"
        group_id: sg-00acc33876316c2d0
        wait: yes
        keypair: jenkins
        instance_tags:
          application: "{{ application }}"
          
    - name: Collect EC2 info
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-type: t2.micro
          instance-state-name: [ "pending", "running" ]
          "tag:application": "{{ application }}"
      register: ec2_instance
      
    - name: Wait for EC2 online
      wait_for:
        host: "{{ item.public_ip_address }}"
        port: 22
        state: started
      with_items: "{{ ec2_instance.instances }}"
      ignore_errors: True
    
    - name: Add EC2 instance to host
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: server
      with_items: "{{ ec2_instance.instances }}"

- name: Deploy EC2
  hosts: server
  remote_user: ubuntu
  become: yes 
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
    
    - name: Install aptitude using apt
      apt:
        name: aptitude
        state: latest
        update_cache: yes
        force_apt_get: yes

    - name: Install required system packages
      apt: 
        name: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
        state: latest 
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: 
        name: docker.io
        update_cache: yes  
        state: latest

    - name: Install Docker Module for Python
      pip:
        name: docker
    
    - name: Pull & Run Docker
      docker_container:
        name: django_container
        image: zhan430/traveblog:2
        published_ports: 
          - "8000:8000"
        pull: yes
        state: started

- name: Setup Route53
  hosts: [localhost]
  connection: local
  gather_facts: false
  vars:
    application: djangogreen
    region: us-west-2
    ansible_python_interpreter: /usr/bin/python3
  
  tasks:
    - name: Add EC2 instance to ELB
      ec2_elb:
        state: present
        ec2_elbs: "{{ application }}-load-balancer"
        region: "{{ region }}"
        instance_id: "{{ item.instance_id }}"
      with_items: "{{ ec2_instance.instances }}"

    - name: change route53
      route53:
        state: present
        zone: lazxy.com
        record: www.lazxy.com
        failover: PRIMARY
        type: CNAME
        ttl: 30
        identifier: blue
        private_zone: yes
        overwrite: yes
        value: "{{ application }}-load-balancer"
        wait: yes
        health_check: "f727fa34-2bbd-4288-b59f-7ca9f74c5f34"
